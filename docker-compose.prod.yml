# Production Docker Compose with Performance Optimizations
# Memory Management Module

version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: memory-mgmt-redis
    ports:
      - "6379:6379"
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
      - redis_data:/data
    environment:
      - REDIS_REPLICATION_MODE=master
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    networks:
      - memory-mgmt-network

  neo4j:
    image: neo4j:5.15
    container_name: memory-mgmt-neo4j
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=neo4j/password
      # Memory optimization
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_query_cache_size=512m
      # Performance optimization
      - NEO4J_dbms_query_timeout=30s
      - NEO4J_dbms_transaction_timeout=60s
      - NEO4J_dbms_lock_acquisition_timeout=20s
      # Connection optimization
      - NEO4J_dbms_connector_bolt_thread_pool_min_size=5
      - NEO4J_dbms_connector_bolt_thread_pool_max_size=400
      - NEO4J_dbms_connector_bolt_thread_pool_keep_alive=5m
      # Security
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "password", "RETURN 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '1.0'
        reservations:
          memory: 2G
          cpus: '0.5'
    networks:
      - memory-mgmt-network

  memory-management:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: memory-mgmt-app
    ports:
      - "8000:8000"
    environment:
      # Database connections
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USERNAME=neo4j
      - NEO4J_PASSWORD=password
      
      # Performance optimization
      - REDIS_MAX_CONNECTIONS=100
      - REDIS_SOCKET_TIMEOUT=30
      - REDIS_SOCKET_CONNECT_TIMEOUT=30
      - REDIS_HEALTH_CHECK_INTERVAL=30
      - REDIS_RETRY_ON_TIMEOUT=true
      
      - NEO4J_MAX_CONNECTION_LIFETIME=3600
      - NEO4J_MAX_CONNECTION_POOL_SIZE=200
      - NEO4J_CONNECTION_ACQUISITION_TIMEOUT=60
      - NEO4J_CONNECTION_TIMEOUT=30
      - NEO4J_MAX_RETRY_TIME=30
      
      # Application settings
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - API_WORKERS=4
      - API_TIMEOUT=30
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
      
      # Memory management
      - MEMORY_STM_TTL_HOURS=24
      - MEMORY_LTM_CONFIDENCE_THRESHOLD=0.7
      - MEMORY_MAX_RELATED_CONCEPTS=10
      - MEMORY_ENABLE_TRACEABILITY=true
      - MEMORY_ENABLE_VERSION_HISTORY=true
      
      # Performance monitoring
      - METRICS_COLLECTION_INTERVAL=60
      - PERFORMANCE_ALERTS_ENABLED=true
      
    volumes:
      - app_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      neo4j:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      replicas: 2
    networks:
      - memory-mgmt-network

  # Load balancer for multiple app instances
  nginx:
    image: nginx:alpine
    container_name: memory-mgmt-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/ssl:/etc/nginx/ssl:ro
    depends_on:
      - memory-management
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - memory-mgmt-network

  # Redis monitoring
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: memory-mgmt-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - memory-mgmt-network

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: memory-mgmt-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - memory-mgmt-network

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: memory-mgmt-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./config/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - memory-mgmt-network

volumes:
  redis_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  memory-mgmt-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16